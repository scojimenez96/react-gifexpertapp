{"version":3,"sources":["componenetes/AddCategory.js","helpers/getGifs.js","componenetes/GifGridItem.js","componenetes/GifGrid.js","hook/useFetchGifs.js","componenetes/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","cats","console","log","type","value","onChange","target","PropType","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"kNAKaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,eAAC,WAAD,WACI,8CACA,sBAAMC,SAZO,SAACC,GAClBA,EAAEC,iBAC0B,KAAxBJ,EAAWK,KAAK,KAChBP,GAAc,SAAAQ,GAAI,OAAKN,GAAL,mBAAmBM,OACrCL,EAAc,KAEdM,QAAQC,IAAI,2BAMZ,SACI,uBACIC,KAAK,OACLC,MAAOV,EACPW,SApBU,SAACR,GACvBF,EAAcE,EAAES,OAAOF,gBAyB/Bb,EAAYgB,SAAW,CACnBf,cAAee,IAASC,KAAKC,Y,mCClCjBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACZC,EADY,iDACoCC,UAAUH,GAD9C,+DAECI,MAAMF,GAFP,cAEZG,EAFY,gBAGGA,EAAKC,OAHR,uBAGXC,EAHW,EAGXA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATxB,kBAYXM,GAZW,4CAAH,sDCCVO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGpC,OACI,sBAAKc,UAAU,yCAAf,UACG,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFFO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAErB,ECJwB,SAACA,GACzB,MAA0BlB,mBAAS,CAC/ByB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAoBA,OAfAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GACFC,YAAW,WACPpC,QAAQC,IAAIkC,GACZH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,MAEb,UAEZ,CAACpB,IAIGqB,EDjBwBM,GAAnBd,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAGpB,OAEA,qCACI,mCAAMpB,EAAN,OACCoB,GAAW,wCACZ,qBAAKJ,UAAU,YAAf,SAEgBH,EAAOJ,KAAI,SAAAC,GAAG,OACd,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEUlBiB,EAzBM,WACjB,MAAoC9C,mBAAS,CAAC,cAA9C,mBAAO+C,EAAP,KAAmBhD,EAAnB,KAEA,OACI,eAAC,WAAD,WACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAGQgD,EAAWpB,KAAK,SAACT,GAAD,OACX,cAAC,EAAD,CAEDA,SAAUA,GADLA,Y,MCX7B8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d93155be.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport { Fragment } from 'react'\r\nimport PropType from \"prop-types\";\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setinputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        setinputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim('') !== ''){\r\n            setCategories(cats => [inputValue,...cats]);\r\n            setinputValue('')\r\n        }else{\r\n            console.log('no se puede introducir')\r\n        }\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <h2>Add Category</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <input \r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </form>\r\n        </Fragment>\r\n    )\r\n}\r\nAddCategory.PropType = {\r\n    setCategories: PropType.func.isRequired\r\n}\r\n","\r\n   export const getGifs = async (category) => {\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=19EbRvkbZM570SgyZYGxp5EybleiqhQa`;\r\n        const resp = await fetch(url);\r\n        const {data} = await resp.json();\r\n\r\n        const gifs = data.map(img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        }) \r\n        return gifs\r\n    }","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    \r\n    return (\r\n        <div className='card animate__animated animate__bounce'>\r\n           <img src={url} alt={title}/>\r\n           <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n//import { getGifs } from '../helpers/getGifs'\r\nimport { useFetchGifs } from '../hook/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGifs();\r\n\r\n\r\n    return (\r\n      \r\n    <>\r\n        <h3> {category} </h3>\r\n        {loading && <p>Loading</p>} \r\n        <div className='card-grid'>\r\n                    {\r\n                        images.map(img => (\r\n                        <GifGridItem \r\n                        key={img.id}\r\n                        {...img}/>\r\n                        ))\r\n                    }\r\n\r\n        </div>\r\n    </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs =>{\r\n                setTimeout(() => {\r\n                    console.log(imgs)\r\n                    setstate({\r\n                        data:imgs,\r\n                        loading:false\r\n                    })\r\n                }, 3000);\r\n            })\r\n    }, [category])\r\n\r\n\r\n\r\n    return state;\r\n}","import react, {useState}from \"react\"\r\nimport { Fragment } from \"react\"\r\nimport { AddCategory } from \"./AddCategory\";\r\nimport { GifGrid } from \"./GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n    const [categorias, setCategories] = useState(['One Punch']);\r\n\r\n    return (\r\n        <Fragment>\r\n            <h1>GifExpertApp</h1>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n            \r\n            <ol>\r\n\r\n                {\r\n                    categorias.map( (category) => \r\n                        (<GifGrid \r\n                        key={category}\r\n                        category={category} />\r\n                    ))\r\n                }\r\n\r\n            </ol>\r\n\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './componenetes/GifExpertApp';\nimport './index.css';\n\n\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}